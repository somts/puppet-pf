# Class: pf
# ==========
#
# A basic module to manage pf installations that mimics the syntax
# of the Puppet Labs firewall module. By default, we allow any packets
# out, lo0 in/out and ICMP in; the rest is rejected. ipf supports a
# subset of pf syntax; pf-only rules are avoided.
#
# Supported Platforms
# -------------------
# Darwin and FreeBSD
#
# Parameters
# ----------
#
# * `conf`
#    location of the master configuration file for pf. Used to reload
#    the firewall rules among other things. Since Darwin treats this
#    specially, we avoid editing this file as much as possible.
#
# * `rules_file`
#    location of a rules file that we will insert our rules into. This
#    is typically handled with an anchor inside of the `conf` file.
#
# * `owner`
#    Owner of config files. Default: `root`.
#
# * `group`
#    Group of config files. Default: `wheel`.
#
# * `rules`
#    A hash containing rules that should be automatically generated by
#    this class. Some defaults are provided, see `data/`.
#
# * `service_name`
#    The name of the basic service that we are managing. Defaults are
#    platform-specific. On Darwin, the default is `com.apple.pfctl`. On
#    FreeBSD, it is `pf`.
#
# * `namespace`
#    On Pf supporting platforms, this is the name we use for the anchor.
#    Default: `com.puppet`
class pf(
  Stdlib::Absolutepath $conf,
  Stdlib::Absolutepath $anchors_d,
  Variant[String,Integer] $owner,
  Variant[String,Integer] $group,
  Enum[running,stopped] $service_ensure,
  Boolean $service_enable,
  Hash $filters,
  Hash $macros,
  Hash $sets,
  Hash $tables,
  Optional[String] $service_anchor,
  Optional[String] $service_name,
) {
  validate_re($::kernel,'^(Darwin|FreeBSD)$',"${::kernel} unsupported")

  # CLASS VARIABLES

  # On OS X (or any OS where we want $service_anchor defined), we
  # minimize manipulation the default pf.conf since the OS's GUI
  # sometimes changes this file too. Instead, we make sure to include
  # our rules from a separate file.
  $rules_file = $service_anchor ? {
    undef   => $conf,
    default => "${anchors_d}/${service_anchor}",
  }

  # MANAGED RESOURCES

  Class['pf::config'] -> Class['pf::service']

  contain pf::config
  contain pf::service

  # Macros
  create_resources('pf::macro',$macros)
  # Tables
  # TODO
  #create_resources('pf::table',$tables)

  # Per `man pf.conf` pf statements should be in this order:

  #   Options
  create_resources('pf::set',$sets)

  #   Traffic Normalization (e.g. scrub)
  # TODO

  #   Queueing
  # TODO

  #   Translation (Various forms of NAT)
  # TODO

  #   Packet Filtering
  create_resources('pf::filter',$filters)
}
